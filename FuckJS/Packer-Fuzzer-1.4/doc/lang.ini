[zh]
{hello} = 你好！
{lang} = zh
{pares_js} = 正在解析网页中...
{target_url} = 目标站点：
{pares_js_fini_1} = 网页解析完毕，共发现
{pares_js_fini_2} = 个JS文件
{downloading} = 正在下载：
{have_it} = 已经存在对应文件：
{maybe_have_codesplit} = 疑似存在JS异步加载：
{get_codesplit} = 正在处理异步加载代码中...
{run_codesplit_s} = 异步JS文件提取成功，提取数量：
{check_codesplit_twice} = 正在暴力检测JS文件中...
{check_codesplit_twice_fini_1} = 暴力检测结束，成功检测出
{check_codesplit_twice_fini_2} = 个JS文件
{check_js_fini} = JS文件收集结束，开始提取平台API...
{total_api_1} = 成功提取出
{total_api_2} = 条API路径
{open_violent_input} = 是否启用暴力提取模式(输入Y开启)：
{total_api_auto} = 提取API总数过少，自动开启暴力提取模式
{api_violent_file} = 暴力提取文件：
{total_api_num} = 提取流程结束，初步提取API可能结果数：
{response_start} = 正在检测目标响应状态中...
{response_end} = 目标响应状态检测结束，开始漏洞检测...
{connect_s} = 网络连通性检测通过，当前出口IP：
{connect_f} = 外网连接失败，请检查当前网络状况或者代理情况
{risk_h} = 高风险
{risk_m} = 中风险
{risk_l} = 低风险
{risk_n} = 无风险
{mode_simple} = 简单版
{mode_adv} = 高级版
{no_extra_cookies} = 未启用Cookies功能
{no_extra_head} = 未启用附加头部功能
{vuln_unauth_num} = 未授权访问漏洞：
{vuln_CORS_num} = CORS漏洞：
{vuln_info_num} = 敏感信息泄露漏洞：
{ge} = 个
{report_creat} = 检测报告正在生成中...
{report_fini} = 检测报告生成完毕！
{r_api_addr} = API地址：
{r_api_js} = 关联JS地址：
{r_api_res} = 响应内容：
{r_js_path} = JS地址：
{r_js_des} = 泄露描述：
{r_js_detial} = 泄露内容：
{r_vuln_unauth} = 接口存在未授权访问漏洞（中危）
{r_vuln_unauth_maybe} = 接口存在未授权访问漏洞（低危、疑似）
{r_vuln_info} = 文件存在敏感信息泄露漏洞（中危）
{r_api_r_js} = 关联JS：
{r_sug_unauth_1} = 针对未授权访问漏洞：
{r_sug_unauth_2} = 对于后台接口，确保所有API接口先经过登录控制器；
{r_sug_unauth_3} = 在验证用户身份权限前不进行任何数据的交互。
{r_sug_info_1} = 针对敏感信息泄露漏洞：
{r_sug_info_2} = 不在JS中保存明文密码、测试数据等信息，及时排查并删除相应内容。
{r_sug_cors_1} = 针对CORS漏洞：
{r_sug_cors_2} = 严格判断来源域名是否在系统白名单内，不推荐使用黑名单判断方式。
{r_sug_sqli_1} = 针对SQL注入漏洞：
{r_sug_sqli_2} = 使用预编译SQL查询方式进行数据库查询；
{r_sug_sqli_3} = 对进入数据库的特殊字符进行转义处理，或编码转换。
{r_sug_upload_1} = 针对任意文件上传漏洞：
{r_sug_upload_2} = 服务端采用白名单方式校验文件后缀；
{r_sug_upload_3} = 设置目录权限限制，禁止上传目录的执行权限；
{r_sug_upload_4} = 建议使用OSS静态存储服务器来存储用户上传的文件。
{r_sug_password_1} = 针对弱口令漏洞：
{r_sug_password_2} = 不要使用常见的弱口令作为密码；
{r_sug_password_3} = 建议使用包含随机值的或者随机生成的字符串作为系统密码。
{r_sug_bac_1} = 针对水平越权漏洞：
{r_sug_bac_2} = 设计表时对用户ID、订单ID等根据ID进行操作的ID字段进行随机化；
{r_sug_bac_3} = 严格校验当前用户操作与当前登录用户身份权限是否匹配。
{r_sug_g_1} = 综合安全加固建议：
{r_sug_g_2} = 配备专业的WEB应用安全防护设备，应对来自互联网的主流WEB应用安全攻击；
{r_sug_g_3} = 定期进行专业的安全评估，及时掌握信息系统的安全状况；
{r_sug_g_4} = 建立一套有效的安全应急流程，并定期对员工进行安全培训；
{r_sug_g_5} = 寻求专业的安全服务团队或是采用例如雷神可信众测的安全众测方式；
{r_sug_g_6} = 完善安全管理制度体系，对信息系统的日常维护和使用进行规范。
{r_get} = GET请求
{r_post} = POST请求
{r_l_h} = 高危
{r_l_m} = 中危
{r_l_l} = 低危
{r_vuln_maybe} = 疑似
{js_split_n} = 无
{js_split_s} = 异步
{js_split_b} = 爆破
{vuln_info} = 漏洞详情
{vuln_type} = 漏洞类型
{vuln_level} = 漏洞等级
{vuln_path} = 漏洞地址
{related_frag} = 关联片段
{r_type} = 请求类型
{api_detail} = API详情
{api_name} = API名称
{scaned_plat} = 被扫描平台
{para_value} = 输入参数值
{scan_method} = 本次扫描采用
{scan_time} = 扫描模式，共耗时
{s} = 秒
{use} = 使用
{ip_address} = 作为扫描出口IP地址
{co_discovery} = 共发现
{effective_api} = 个有效 API 接口
{effective_js} = 个相关 JS 文件
{effective_vuln} =  个安全漏洞
{extra_cookies} = 附加 Cookies 信息为
{extra_head} =  附加头部信息为
{vuln_total_level} =  经过本工具分析，目标平台的安全风险等级为
{no_vuln} = 无漏洞
{unauth_vuln} = 未授权访问漏洞
{info_vuln} = 敏感信息泄露漏洞
{info_vuln_type} = 敏感信息类型
{password_vuln} = 弱口令漏洞
{vuln_passWord_num} = 弱口令漏洞:
{r_vuln_passWord} = 接口存在弱口令漏洞（高危）
{request_info} = 请求内容:
{request_head} = 请求头
{response_head} = 响应头
{CORS_vuln} = CORS漏洞
{r_vuln_CORS} = 站存在CORS漏洞(低危)
{web_addr} = 网站
{r_vuln_bac} = 存在水平越权漏洞（中危）
{vuln_BAC_num} = 水平越权漏洞数量
{respons_info} = 响应内容
{BAC_vuln} = 水平越权漏洞
{r_vuln_upload} = 存在任意文件上传漏洞（高危）
{upload_vuln} = 任意文件上传漏洞
{vuln_upload_num} = 任意文件上传漏洞数量
{vuln_sql_num} = SQL注入漏洞数量
{r_vuln_sql} = 存在SQL注入漏洞(高危)
{sql_vuln} = SQL注入漏洞
{adv_start} = 进入高级模式流程...
{beauty_js} = 正在对JS文件做二次美化中...
{fuzzer_param} = 正在提取API参数中，提取时间可能较长...
{ext_start} = 扩展功能开启，正在执行附件插件中...
{ext_end} = 附加插件全部执行完毕...
{unauth_test} = 开始检测未授权访问漏洞
{info_test} = 开始检测敏感信息泄露漏洞
{cors_test} = 开始检测CORS漏洞
{password_test} = 开始检测弱口令漏洞
{upload_test} = 开始检测任意文件上传漏洞
{bac_test} = 开始检测水平越权漏洞
{sql_test} = 开始检测SQL注入漏洞
{all_end} = 全部扫描及检测完毕，Packer Fuzzer团队感谢您的使用！
{check_pack_s} = 恭喜，这个站点很可能是通过前端打包器构建的！
{check_pack_f} = 未检测到前端打包器特征，也有可能是现有规则不足...
{xhlj} = 西湖论剑 ༒༒༒  首届国产优秀网络安全工具主题展参展作品
{db_path} = 缓存文件路径：
{log_path} = 日志文件路径：
{base_dir_list} = 成功提取如下BaseDir：
{api_top5_list} = 前五条API提取结果如下：
{new_base_dir} = 检测到提取结果不准确，请输入新的BaseDir (使用逗号分隔)：
{api_length} = 长度

[fr]
{hello} = Bonjour！
{lang} = fr
{pares_js} = Analyse de la page ...
{target_url} = Site cible：
{pares_js_fini_1} = Analyse de la page terminée,
{pares_js_fini_2} =  fichier(s) JS trouvé
{downloading} = En cours de téléchargement：
{have_it} = Le(s) document(s) correspondant(s) existe(nt) déjà：
{maybe_have_codesplit} = Soupçonne l'existence du chargement asynchrone JS
{get_codesplit} = En cours de traitement le chargement du code de manière asynchrone ...
{run_codesplit_s} = Succès de l'extraction du fichier JS asynchrone, nombre de retraits：
{check_codesplit_twice} = En cours de la détection force brute ...
{check_codesplit_twice_fini_1} = Fin de la détection de la force brute,
{check_codesplit_twice_fini_2} = fichiers JS détectés avec succès
{check_js_fini} = La collecte des fichiers JS est terminée et l'extraction de l'API de la plate-forme commence...
{total_api_1} = extrait avec succès
{total_api_2} = chemin API
{open_violent_input} = activer le mode d'extraction de force brute ou pas (entrée Y pour activer)：
{total_api_auto} = Trop peu d'API totales à extraire et le mode d'extraction par force brute est automatiquement activé：
{api_violent_file} = Extraction violente du fichier：
{total_api_num} = Fin du processus d'extraction, nombre de résultats possibles pour l'extraction initiale de l'API：
{response_start} = L'état de la réponse de la cible est détecté...
{response_end} = Statut de la réponse de la cible vérifié, détection de la vulnérabilité lancée...
{connect_s} = Connectivité réseau vérifiée, courant de sortie IP：
{connect_f} = La connexion extranet a échoué, veuillez vérifier l'état actuel du réseau ou la situation du proxy：
{risque_h} = Risque élevé
{risque_m} = Risque moyen
{risque_l} = Risque faible
{risque_n} = Aucun risque
{mode_simple} = Version simple
{mode_adv} = Edition avancée
{no_extra_cookies} = Les cookies ne sont pas activés：
{no_extra_head} = La fonction de tête supplémentaire n'est pas activée：
{vuln_unauth_num} = Vulnérabilité à l'accès non autorisé ：
{vuln_CORS_num} = Vulnérabilité de Cors ：
{vuln_info_num} = Vulnérabilité à la divulgation d'informations sensibles ：
{ge} =
{report_creat} = Rapport d'inspection en cours de génération...
{report_fini} = Rapport d'inspection terminé !
{r_api_addr} = Adresse API：
{r_api_js} = Adresse JS associée：
{r_api_res} = Contenu de la réponse：
{r_js_path} = Adresse JS：
{r_js_des} = Description de la fuite：
{r_js_detial} = Contenu divulgué：
{r_vuln_unauth} = Vulnérabilité d'accès non autorisé dans l'interface (risque moyen)
{r_vuln_unauth_maybe} = Vulnérabilité d'accès non autorisé dans l'interface (risque faible, suspecté)
{r_vuln_info} = le fichier présente une fuite d'informations sensibles (risque moyen)
{r_api_r_js} = JS associé：
{r_sug_unauth_1} = Pour la vulnérabilité de l'accès non autorisé:
{r_sug_unauth_2} = Pour les interfaces dorsales, assurez-vous que toutes les interfaces API passent d'abord par le contrôleur de connexion.
{r_sug_unauth_3} = Aucune donnée n'est traitée tant que les privilèges de l'utilisateur n'ont pas été vérifiés.
{r_sug_info_1} = Pour les vulnérabilités de divulgation d'informations sensibles.
{r_sug_info_2} = Ne stockez pas de mots de passe en clair, de données de test et d'autres informations dans JS, et dépannez et supprimez rapidement le contenu correspondant.
{r_sug_cors_1} = Pour les vulnérabilités de la CORS:
{r_sug_cors_2} = Déterminez strictement si le domaine source se trouve dans la liste blanche, l'inscription sur liste noire n'est pas recommandée.
{r_sug_sqli_1} = Pour les vulnérabilités d'injection SQL:
{r_sug_sqli_2} = Utilisez des requêtes SQL précompilées pour les interrogations de la base de données.
{r_sug_sqli_3} = Les caractères spéciaux qui entrent dans la base de données sont échappés, ou encodés.
{r_sug_upload_1} = Pour les vulnérabilités de téléchargement de fichiers arbitraires.
{r_sug_upload_2} = Le serveur utilise une liste blanche pour vérifier les extensions de fichiers.
{r_sug_upload_3} = Définir les restrictions des permissions du répertoire pour désactiver les permissions d'exécution du répertoire de téléchargement.
{r_sug_upload_4} = Il est recommandé d'utiliser un serveur de stockage statique OSS pour stocker les fichiers téléchargés par les utilisateurs.
{r_sug_password_1} = Pour les vulnérabilités faibles des mots de passe.
{r_sug_password_2} = N'utilisez pas de mots de passe faibles courants comme mots de passe.
{r_sug_password_3} = Il est recommandé d'utiliser une chaîne contenant une valeur aléatoire ou une chaîne générée de façon aléatoire comme mot de passe du système.
{r_sug_bac_1} = Pour les vulnérabilités de contournement horizontal.
{r_sug_bac_2} = Randomiser les champs ID qui fonctionnent sur les ID, tels que les ID utilisateur et les ID de commande, lors de la conception des tables.
{r_sug_bac_3} = Vérifiez strictement que l'opération en cours de l'utilisateur correspond aux privilèges d'identité de l'utilisateur connecté.
{r_sug_g_1} = Recommandations globales de renforcement de la sécurité.
{r_sug_g_2} = Équipé d'un équipement professionnel de protection de la sécurité des applications web pour faire face aux principales attaques de sécurité des applications web provenant d'Internet.
{r_sug_g_3} = Évaluations professionnelles périodiques de la sécurité pour se tenir au courant de l'état de sécurité des systèmes d'information.
{r_sug_g_4} = Établir un processus d'urgence efficace en matière de sécurité et organiser régulièrement des formations à la sécurité pour les employés.
{r_sug_g_5} = Recherche d'une équipe de service de sécurité professionnelle ou utilisation d'une approche de crowdsourcing de sécurité telle que le ThorSRC (Bountyteam China).
{r_sug_g_6} = Améliorer le système de gestion de la sécurité et normaliser la maintenance et l'utilisation courantes des systèmes d'information.
{r_get} = Requête GET
{r_post} = Requête POST
{r_l_h} = risque élevé
{r_l_m} = risque moyen
{r_l_l} = faible risque
{r_vuln_maybe} = suspect
{js_split_n} = aucun
{js_split_s} = asynchrone
{js_split_b} = explosion
{vuln_info} = Détails de la vulnérabilité
{vuln_type} = type de vulnérabilité
{vuln_level} = Niveau de vulnérabilité
{vuln_path} = l'adresse de la vulnérabilité est
{related_frag} = fragment apparenté
{r_type} = type de demande
{api_detail} = Détails de l'API
{api_name} = nom de l'AP
{scaned_plat} = la plate-forme en cours de numérisation
{para_value} = valeur du paramètre d'entrée
{scan_method} = Le scan a été effectué est
{scan_time} = mode de balayage, temps total écoulé
{s} = secondes
{utilisation} = utilisation
{ip_address} = comme une adresse IP de sortie scannée
{co_discovery} = découverte totale
{effective_api} = une interface API valide.
{effective_js} = un fichier JS apparenté.
{effective_vuln} = faille de sécurité
{extra_cookies} = Attacher les cookies comme
{extra_head} = L'information d'en-tête supplémentaire est
{vuln_total_level} = A l'issue de l'analyse de cet outil, la plate-forme cible présente un niveau de risque de sécurité
{no_vuln} = Aucune vulnérabilité.
{unauth_vuln} = Vulnérabilité à l'accès non autorisé
{info_vuln} = Violation d'informations sensibles.
{info_vuln_type} = type d'information sensible
{password_vuln} = faible vulnérabilité des mots de passe
{vuln_passWord_num} = Faible vulnérabilité des mots de passe :
{r_vuln_passWord} = Faible vulnérabilité des mots de passe (risque élevé) dans l'interface.
{request_info} = Le contenu de la demande :
{request_head} = en-tête de la demande
{response_head} = en-tête de la réponse
{CORS_vuln} = vulnérabilité de la SCRO
{r_vuln_CORS} = la station a une vulnérabilité CORS (faible risque).
{web_addr} = site web
{r_vuln_bac} = Vulnérabilité horizontale (risque moyen).
{vuln_BAC_num} = nombre de vulnérabilités de contournement horizontal
{respons_info} = contenu de la réponse
{BAC_vuln} = vulnérabilité horizontale
{r_vuln_upload} = Il existe une vulnérabilité arbitraire dans le téléchargement de fichiers.
{upload_vuln} = vulnérabilité arbitraire de téléchargement de fichiers.
{vuln_upload_num} = Vulnérabilité au téléchargement de fichiers arbitraires :
{vuln_sql_num} = nombre de vulnérabilités d'injection SQL
{r_vuln_sql} = vulnérabilité d'injection SQL (risque élevé).
{sql_vuln} = Vulnérabilité à l'injection SQL
{adv_start} = Entrée en mode avancé...
{beauty_js} = Nous retravaillons le fichier JS...
{fuzzer_param} = Extraction des paramètres de l'API, qui peut prendre plus de temps...
{ext_start} = Les extensions sont activées, en exécutant un add-on...
{ext_end} = Les plug-ins supplémentaires ont été entièrement exécutés...
{unauth_test} = Commencez à détecter les accès non autorisés...
{info_test} = Commencez à détecter les vulnérabilités des informations sensibles.
{cors_test} = Commencez à détecter les vulnérabilités de la SCRO.
{password_test} = Commencez à détecter les vulnérabilités faibles des mots de passe.
{upload_test} = Commencez à détecter les vulnérabilités de téléchargement de fichiers arbitraires.
{bac_test} = Commencez à détecter les vulnérabilités de contournement horizontal.
{sql_test} = Commencez à détecter les vulnérabilités de l'injection SQL.
{all_end} = Tous les scannages et inspections sont terminés, l'équipe de Packer Fuzzer vous remercie de l'avoir utilisé !
{check_pack_s} = Félicitations, ce site a probablement été construit grâce à un emballeur frontal !
{check_pack_f} = Fonctionnalité du packer frontal non détectée, ou peut-être qu'une règle existante est insuffisante...
{xhlj} = ༒ Exhibiting tools at China's CYBER SECURITY ARSENAL
{db_path} = Chemin du fichier cache：
{log_path} = Chemin du fichier journal：
{base_dir_list} = Extrayez le BaseDir suivant：
{api_top5_list} = Les cinq premiers résultats d'extraction d'API sont les：
{new_base_dir} = Extraction inexacte détectée, veuillez saisir un nouveau BaseDir (séparé par des virgules)：
{api_length} = Longueur

[en]
{hello} = Hello！
{lang} = en
{pares_js} = Parsing the page ...
{target_url} = Target sites：
{pares_js_fini_1} = Page analysis completed,
{pares_js_fini_2} = JS files found
{downloading} = Downloading：
{have_it} = The corresponding file already exists：
{maybe_have_codesplit} = JS asynchronous loading is suspected to exist：
{get_codesplit} = Processing asynchronous code loading
{run_codesplit_s} = Successful extraction of the asynchronous JS file, number of withdrawals：
{check_codesplit_twice} = Brute force detecting ...
{check_codesplit_twice_fini_1} = End of brute force detection,
{check_codesplit_twice_fini_2} =  JS files detected successfully
{check_js_fini} = The collection of the JS files is finished and the extraction of the API from the platform begins ...
{total_api_1} = successfully extracted
{total_api_2} = API path
{open_violent_input} = If or not to enable brute force extraction mode (input Y to enable)：
{total_api_auto} = Too few total APIs to extract and brute force extraction mode is automatically enabled：
{api_violent_file} = violent extraction of file.
{total_api_num} = End of extraction process, number of possible results for initial API extraction：
{response_start} = Target response status is being detected...
{response_end} = Target response status checked, vulnerability detection started...
{connect_s} = Network connectivity checked, current egress IP：
{connect_f} = The extranet connection failed, please check the current network status or proxy situation：
{risk_h} = High risk
{risk_m} = Medium risk
{risk_l} = Low risk
{risk_n} = No risk
{mode_simple} = Simple Version
{mode_adv} = Advanced Edition
{no_extra_cookies} = Cookies are not enabled：
{no_extra_head} = The additional head feature is not enabled：
{vuln_unauth_num} = Unauthorized Access Vulnerability：
{vuln_CORS_num} = Cors vulnerability：
{vuln_info_num} = Sensitive Information Disclosure Vulnerability：
{ge} =
{report_creat} = The test report is being generated...
{report_fini} = The report is generated!
{r_api_addr} = API address:
{r_api_js} = Associated JS address：
{r_api_res} = Response content：
{r_js_path} = JS address：
{r_js_des} = Leak description：
{r_js_detial} = Leaked content：
{r_vuln_unauth} = Unauthorized access vulnerability in interface (medium risk)
{r_vuln_unauth_maybe} = Unauthorized access vulnerability in interface (low risk, suspected)
{r_vuln_info} = file has a sensitive information leak (medium risk)
{r_api_r_js} = Associated JS：
{r_sug_unauth_1} = For unauthorized access vulnerability.
{r_sug_unauth_2} = For backend interfaces, ensure that all API interfaces go through the login controller first.
{r_sug_unauth_3} = No data is interacted with until user identity privileges are verified.
{r_sug_info_1} = For sensitive information disclosure vulnerabilities.
{r_sug_info_2} = Do not store plaintext passwords, test data, and other information in JS, and promptly troubleshoot and delete the corresponding content.
{r_sug_cors_1} = For CORS vulnerabilities.
{r_sug_cors_2} = Strictly determine if the source domain is in the whitelist, blacklisting is not recommended.
{r_sug_sqli_1} = For SQL injection vulnerabilities.
{r_sug_sqli_2} = Use precompiled SQL queries for database queries.
{r_sug_sqli_3} = The special characters that enter the database are escaped, or encoded.
{r_sug_upload_1} = For arbitrary file upload vulnerabilities.
{r_sug_upload_2} = The server uses a whitelist to check file extensions.
{r_sug_upload_3} = Set directory permissions restrictions to disable execution permissions for the upload directory.
{r_sug_upload_4} = It is recommended that you use an OSS static storage server to store files uploaded by users.
{r_sug_password_1} = For weak password vulnerabilities.
{r_sug_password_2} = Do not use common weak passwords as passwords.
{r_sug_password_3} = It is recommended to use a string containing a random value or a randomly generated string as the system password.
{r_sug_bac_1} = For horizontal override vulnerabilities.
{r_sug_bac_2} = Randomize ID fields that operate on IDs, such as user IDs and order IDs, when designing tables.
{r_sug_bac_3} = Strictly verify that the current user operation matches the current logged-in user's identity privileges.
{r_sug_g_1} = Comprehensive Security Reinforcement Recommendations.
{r_sug_g_2} = Equipped with professional web application security protection equipment to deal with mainstream web application security attacks from the Internet.
{r_sug_g_3} = Periodic professional security assessments to keep abreast of the security status of information systems.
{r_sug_g_4} = Establish an effective safety emergency process and conduct regular safety training for employees.
{r_sug_g_5} = Seeking a professional security service team or using a security crowdsourcing approach such as ThorSRC (Bountyteam China).
{r_sug_g_6} = Improve the security management system system and standardize the routine maintenance and use of information systems.
{r_get} = GET request
{r_post} = POST request
{r_l_h} = high risk
{r_l_m} = medium-risk
{r_l_l} = low risk
{r_vuln_maybe} = suspect
{js_split_n} = none.
{js_split_s} = asynchronous
{js_split_b} = blast.
{vuln_info} = Vulnerability details
{vuln_type} = type of vulnerability
{vuln_level} = Vulnerability level
{vuln_path} = the address of the vulnerability.
{related_frag} = related fragment
{r_type} = request type
{api_detail} = API details
{api_name} = API name
{scaned_plat} = the platform being scanned.
{para_value} = input parameter value
{scan_method} = The scan was done.
{scan_time} = scan mode, total elapsed time.
{s} = seconds.
{use} = use
{ip_address} = as a scanned egress IP address
{co_discovery} = total discovery
{effective_api} = a valid API interface.
{effective_js} = a related JS file.
{effective_vuln} = security hole
{extra_cookies} = Attach cookies as
{extra_head} = The additional header information is
{vuln_total_level} = As a result of this tool's analysis, the target platform has a security risk level of
{no_vuln} = No vulnerabilities.
{unauth_vuln} = Unauthorized Access Vulnerability
{info_vuln} = Sensitive information breach.
{info_vuln_type} = sensitive information type
{password_vuln} = weak password vulnerability
{vuln_passWord_num} = Weak password vulnerability:
{r_vuln_passWord} = Weak password vulnerability (high risk) in interface.
{request_info} = The content of the request:
{request_head} = request header
{response_head} = response_head
{CORS_vuln} = CORS vulnerability
{r_vuln_CORS} = station has a CORS vulnerability (low risk).
{web_addr} = website
{r_vuln_bac} = Horizontal override vulnerability (medium risk).
{vuln_BAC_num} = number of horizontal override vulnerabilities
{respons_info} = response content
{BAC_vuln} = horizontal override vulnerability
{r_vuln_upload} = There is an arbitrary file upload vulnerability.
{upload_vuln} = arbitrary file upload vulnerability.
{vuln_upload_num} = Arbitrary file upload vulnerability:
{vuln_sql_num} = Number of SQL Injection Vulnerabilities
{r_vuln_sql} = SQL injection vulnerability (high risk).
{sql_vuln} = SQL Injection Vulnerability
{adv_start} = Entering advanced mode...
{beauty_js} = We're reworking the JS file...
{fuzzer_param} = Extracting API parameters, which may take longer...
{ext_start} = Extensions are enabled, running an add-on...
{ext_end} = Additional plug-ins have been fully executed...
{unauth_test} = Start detecting unauthorized access...
{info_test} = Start detecting sensitive information vulnerabilities.
{cors_test} = Start detecting CORS vulnerabilities.
{password_test} = Start detecting weak password vulnerabilities.
{upload_test} = Start detecting arbitrary file upload vulnerabilities.
{bac_test} = Start detecting horizontal override vulnerabilities.
{sql_test} = Start detecting SQL injection vulnerabilities.
{all_end} = All scans and inspections complete, the Packer Fuzzer team thanks you for using it!
{check_pack_s} = Congratulations, this site was most likely built through a front-end packer!
{check_pack_f} = Front-end packer feature not detected, or maybe an existing rule is insufficient...
{xhlj} = ༒ Exhibiting tools at China's CYBER SECURITY ARSENAL
{db_path} = Cache file path：
{log_path} = Log file path：
{base_dir_list} = Extract the following BaseDir：
{api_top5_list} = The first five API extraction results are：
{new_base_dir} = Inaccurate extraction detected, please enter a new BaseDir (separated by commas)：
{api_length} = Length

[es]
{hello} = Hola！
{lang} = es
{pares_js} = Analizando la página en curso ...
{target_url} = Objetivo sitios：
{pares_js_fini_1} = El análisis de la página está completo, se encontraron
{pares_js_fini_2} = archivos JS.
{downloading} = Descargando：
{have_it} = El archivo correspondiente ya existe：
{maybe_have_codesplit} = Se sospecha que existe la carga asincrónica JS：
{get_codesplit} = Procesamiento de la carga de código asíncrono
{run_codesplit_s} = Archivo JS asincrónico extraído con éxito, número de retiros：
{check_codesplit_twice} = La fuerza bruta detecta ...
{check_codesplit_twice_fini_1} = Fin de la detección de fuerza bruta,
{check_codesplit_twice_fini_2} =  archivos JS detectados con éxito
{check_js_fini} = La colección de archivos JS está terminada y la extracción del API de la plataforma comienza ...
{{total_api_1} = extraído con éxito
{total_api_2} = ruta API
{open_violent_input} = Si o no para habilitar el modo de extracción de fuerza bruta (entrada Y para habilitar)：
{total_api_auto} = Demasiado pocos APIs totales para extraer y el modo de extracción por fuerza bruta se activa automáticamente：
{api_violent_file} = Extracción de archivos violentos：
{total_api_num} = Fin del proceso de extracción, número de resultados posibles para la extracción inicial del API：
{response_start} = El estado de respuesta del objetivo está siendo detectado...
{response_end} = Estado de respuesta del objetivo comprobado, detección de vulnerabilidad iniciada...
{connect_s} = Conectividad de red detectada, salida actual de IP：
{connect_f} = La conexión a la extranet falló, por favor compruebe el estado actual de la red o la situación del proxy：
{risk_h} = Alto riesgo
{risk_m} = Riesgo medio
{risk_l} = Bajo riesgo
{risk_n} = Sin riesgo
{mode_simple} = Versión simple
{mode_adv} = Edición Avanzada
{no_extra_cookies} = Las cookies no están habilitadas.
{no_extra_head} = La característica de cabeza adicional no está activada：
{vuln_unauth_num} = Vulnerabilidad de acceso no autorizado：
{vuln_CORS_num} = Vulnerabilidad de Cors：
{vuln_info_num} = Vulnerabilidad a la revelación de información sensible：
{ge} =
{report_creat} = El informe de la prueba se está generando...
{report_fini} = ¡El informe se está generando!
{r_api_addr} = Dirección API：
{r_api_js} = Dirección JS asociada：
{r_api_res} = Contenido de la respuesta：
{r_js_path} = Dirección JS：
{r_js_des} = descripción de la fuga：
{r_js_detial} = Contenido filtrado：
{r_vuln_unauth} = Vulnerabilidad de acceso no autorizado en la interfaz (riesgo medio)
{r_vuln_unauth_maybe} = Vulnerabilidad de acceso no autorizado en la interfaz (bajo riesgo, se sospecha)
{r_vuln_info} = el archivo tiene una fuga de información sensible (riesgo medio)
{r_api_r_js} = JS asociado：
{r_sug_unauth_1} = Para la vulnerabilidad de acceso no autorizado.
{r_sug_unauth_2} = Para las interfaces del backend, asegúrate de que todas las interfaces de la API pasen primero por el controlador de acceso.
{r_sug_unauth_3} = No se interactúa con ningún dato hasta que se verifiquen los privilegios de identidad del usuario.
{r_sug_info_1} = Para vulnerabilidades de divulgación de información sensible.
{r_sug_info_2} = No almacene contraseñas de texto plano, datos de prueba y otra información en JS, y solucione rápidamente los problemas y elimine el contenido correspondiente.
{r_sug_cors_1} = Para las vulnerabilidades del CORS.
{r_sug_cors_2} = Determinar estrictamente si el dominio de la fuente está en la lista blanca, no se recomienda la lista negra.
{r_sug_sqli_1} = Para vulnerabilidades de inyección SQL.
{r_sug_sqli_2} = Usar consultas SQL precompiladas para consultas de bases de datos.
{r_sug_sqli_3} = Los caracteres especiales que entran en la base de datos se escapan, o se codifican.
{r_sug_upload_1} = Para vulnerabilidades de carga de archivos arbitrarios.
{r_sug_upload_2} = El servidor utiliza una lista blanca para comprobar las extensiones de los archivos.
{r_sug_upload_3} = Establecer las restricciones de los permisos del directorio para desactivar los permisos de ejecución del directorio de subida.
{r_sug_upload_4} = Se recomienda utilizar un servidor de almacenamiento estático de OSS para almacenar los archivos subidos por los usuarios.
{r_sug_password_1} = Para vulnerabilidades de contraseñas débiles.
{r_sug_password_2} = No uses contraseñas débiles comunes como contraseñas.
{r_sug_password_3} = Se recomienda utilizar una cadena que contenga un valor aleatorio o una cadena generada al azar como la contraseña del sistema.
{r_sug_bac_1} = Para vulnerabilidades de anulación horizontal.
{r_sug_bac_2} = Aleatorizar los campos de ID que operan con IDs, como IDs de usuario e IDs de orden, cuando se diseñan tablas.
{r_sug_bac_3} = Verificar estrictamente que la operación del usuario actual coincide con los privilegios de identidad del usuario actual.
{r_sug_g_1} = Recomendaciones para el refuerzo de la seguridad.
{r_sug_g_2} = Equipado con equipo profesional de protección de seguridad de aplicaciones web para hacer frente a los principales ataques de seguridad de aplicaciones web de Internet.
{r_sug_g_3} = Evaluaciones profesionales periódicas de seguridad para estar al tanto del estado de seguridad de los sistemas de información.
{r_sug_g_4} = Establecer un proceso efectivo de emergencia de seguridad y llevar a cabo un entrenamiento regular de seguridad para los empleados.
{r_sug_g_5} = Buscando un equipo profesional del servicio de seguridad o usando un enfoque de crowdsourcing de seguridad como ThorSRC (Bountyteam China).
{r_sug_g_6} = Mejorar el sistema de gestión de la seguridad y estandarizar el mantenimiento y el uso rutinario de los sistemas de información.
{r_get} = Solicitud de GET
{r_post} = Solicitud POST
{r_l_h} = alto riesgo
{r_l_m} = riesgo medio
{r_l_l} = bajo riesgo
{r_vuln_maybe} = sospechoso
{js_split_n} = ninguno.
{js_split_s} = asíncrono
{js_split_b} = explosión.
{vuln_info} = Detalles de la vulnerabilidad
{vuln_type} = tipo de vulnerabilidad
{vuln_level} = Nivel de vulnerabilidad
{vuln_path} = la dirección de la vulnerabilidad.
{related_frag} = fragmento relacionado
{r_type} = tipo de solicitud
{api_detail} = detalles de la API
{api_name} = nombre de la API
{scaned_plat} = la plataforma que está siendo escaneada.
{para_valor} = valor del parámetro de entrada
{scan_method} = El escaneo se hizo.
{scan_time} = modo de escaneo, tiempo total transcurrido.
{s} = segundo
{use} = usar
{ip_address} = como una dirección IP de salida escaneada
{co_discovery} = descubrimiento total
{effective_api} = una interfaz API válida.
{effective_js} = un archivo JS relacionado.
{effective_vuln} = agujero de seguridad
{extra_cookies} = Adjuntar cookies como
{extra_head} = La información adicional del encabezado es
{vuln_total_level} = Como resultado del análisis de esta herramienta, la plataforma objetivo tiene un nivel de riesgo de seguridad de
{no_vuln} = Sin vulnerabilidades.
{unauth_vuln} = Vulnerabilidad de acceso no autorizado
{info_vuln} = Brecha de información sensible.
{info_vuln_type} = tipo de información sensible
{password_vuln} = vulnerabilidad de la contraseña débil
{vuln_passWord_num} = Débil vulnerabilidad de la contraseña:
{r_vuln_passWord} = Débil vulnerabilidad de la contraseña (alto riesgo) en la interfaz.
{request_info} = El contenido de la solicitud:
{request_head} = encabezamiento de la solicitud
{response_head} = response_head
{CORS_vuln} = vulnerabilidad del CORS
{r_vuln_CORS} = la estación tiene una vulnerabilidad CORS (bajo riesgo).
{web_addr} = sitio web
{r_vuln_bac} = Vulnerabilidad de anulación horizontal (riesgo medio).
{vuln_BAC_num} = número de vulnerabilidades de anulación horizontal
{respons_info} = contenido de la respuesta
{BAC_vuln} = vulnerabilidad de anulación horizontal
{r_vuln_upload} = Hay una vulnerabilidad de subida de archivos arbitraria.
{upload_vuln} = vulnerabilidad de subida de archivos arbitraria.
{vuln_upload_num} = Vulnerabilidad de carga de archivos arbitraria:
{vuln_sql_num} = Número de vulnerabilidades de inyección SQL
{r_vuln_sql} = vulnerabilidad de inyección SQL (alto riesgo).
{sql_vuln} = Vulnerabilidad de Inyección SQL
{adv_start} = Entrando en modo avanzado...
{beauty_js} = Estamos trabajando en el archivo JS...
{fuzzer_param} = Extraer los parámetros de la API, lo que puede llevar más tiempo...
{ext_start} = Las extensiones están habilitadas, ejecutando un add-on...
{ext_end} = Los plug-ins adicionales han sido ejecutados completamente...
{unauth_test} = Empieza a detectar el acceso no autorizado...
{info_test} = Empieza a detectar las vulnerabilidades de la información sensible.
{cors_test} = Empieza a detectar las vulnerabilidades del CORS.
{password_test} = Empieza a detectar vulnerabilidades de contraseñas débiles.
{upload_test} = Empieza a detectar vulnerabilidades de subida de archivos arbitrarios.
{bac_test} = Empieza a detectar vulnerabilidades de anulación horizontal.
{sql_test} = Empieza a detectar las vulnerabilidades de la inyección SQL.
{all_end} = Todos los escaneos e inspecciones se han completado, el equipo de Packer Fuzzer le agradece por usarlo!
{check_pack_s} = Felicitaciones, este sitio fue probablemente construido a través de un empaquetador frontal!
{check_pack_f} = Característica de empaquetador frontal no detectada, o tal vez una regla existente es insuficiente...
{xhlj} = ༒ Exhibiting tools at China's CYBER SECURITY ARSENAL
{db_path} = Ruta del archivo caché：
{log_path} = Ruta del archivo de registro：
{base_dir_list} = Extraiga el siguiente BaseDir：
{api_top5_list} = Los primeros cinco resultados de extracción de API son los：
{new_base_dir} = Se detectó una extracción inexacta, ingrese un nuevo BaseDir (separado por comas)：
{api_length} = Longitud

[ja]
{hello} = こんにちは！
{lang} = ja
{pares_js} = ウェブページを解析中
{target_url} = ターゲットサイト：
{pares_js_fini_1} = ウェブページの解析が終わりました,
{pares_js_fini_2} = jsファイルが見つかりました
{downloading} = ダウンロード中：
{have_it} = 対応ファイルは既に存在します
{maybe_have_codesplit} = JS非同期ローディングの疑いがあります
{get_codesplit} = 非同期ローディングコードを処理中...
{run_codesplit_s} = 非同期JSファイルの抽出に成功しました。抽出数量は
{check_codesplit_twice} = JSファイルを暴力に検出しています...
{check_codesplit_twice_fini_1} = 暴力検出終了,検出された数量は
{check_codesplit_twice_fini_2} = 個のjsファイル
{check_js_fini} = JSファイルの収集が終わり、プラットフォームAPIの抽出を開始しました...
{total_api_1} = 正常に抽出されたAPIパスの数は
{total_api_2} = 個
{open_violent_input} = ブルートフォースモードを開きますか(開くにはYを入力してください)
{total_api_auto} = 抽出APIの総数が少なすぎるため、ブルートフォースモードが自動的にオンになります
{api_violent_file} = ブルートフォースモードから抽出されたファイル：
{total_api_num} = 抽出プロセスの最後に、予備のAPI抽出の可能な結果の数は：
{response_start} =ターゲットの応答ステータスを検出しています...
{response_end} =ターゲットレスポンスステータスの検出が終了し、脆弱性の検出が始まります..
{connect_s} =　ネットワーク接続テストに合格しました。現在のエクスポートIP：
{connect_f} =　インターネット接続に失敗しました，現在のネットワークステータスまたはプロキシステータスを確認してください
{risk_h} = リスクが高い
{risk_m} = 中リスク
{risk_l} = リスクが低い
{risk_n} = ノーリスク
{mode_simple} = シンプルモード
{mode_adv} = アドバンストモード
{no_extra_cookies} = cookies機能が有効になっていません
{no_extra_head} = 追加のヘッダー機能が有効になっていません
{vuln_unauth_num} = 不正アクセスの脆弱性
{vuln_CORS_num} = corsの脆弱性
{vuln_info_num} = 機密情報漏えいの脆弱性：
{ge} = 個
{report_creat} = テストレポートを生成しています...
{report_fini} = テストレポートが生成されます
{r_api_addr} = APIアドレス：
{r_api_js} = 関連付けられたjsアドレス：
{r_api_res} = 応答内容：
{r_js_path} = jsアドレス：
{r_js_des} = 漏洩した説明：
{r_js_detial} = 漏洩したコンテンツ：
{r_vuln_unauth} = インターフェースに不正アクセスの脆弱性が存在します（中リスク）
{r_vuln_unauth_maybe} = インターフェースでの不正アクセスの脆弱性（低リスク、疑わしい）
{r_vuln_info} = ファイルに機密情報の漏えいの脆弱性があります（中リスク）
{r_api_r_js} = JSをリンク：
{r_sug_unauth_1} = 不正アクセスの脆弱性の場合：
{r_sug_unauth_2} = バックグラウンドインターフェースの場合、すべてのAPIインターフェースが最初にログインコントローラーを通過することを確認します。
{r_sug_unauth_3} = ユーザーのIDと権限を確認する前に、データのやり取りを行わないでください。
{r_sug_info_1} = 機密情報漏えいの脆弱性：
{r_sug_info_2} = プレーンテキストのパスワード、テストデータ、およびその他の情報をJSに保存しないでください。対応するコンテンツを時間内にチェックして削除してください。
{r_sug_cors_1} = CORS脆弱性の場合：
{r_sug_cors_2} = ソースドメイン名がシステムのホワイトリストにあるかどうかを厳密に判断します。ブラックリストの判断はお勧めしません。
{r_sug_sqli_1} = SQLインジェクションの脆弱性：
{r_sug_sqli_2} = データベースクエリにプリコンパイル済みSQLクエリメソッドを使用します。
{r_sug_sqli_3} = データベースに入る特殊文字をエスケープまたは変換します。
{r_sug_upload_1} = 任意のファイルアップロードの脆弱性：
{r_sug_upload_2} = サーバーはホワイトリストを使用してファイルサフィックスを確認します。
{r_sug_upload_3} = ディレクトリ権限の制限を設定し、ディレクトリのアップロードの実行権限を禁止します。
{r_sug_upload_4} = ユーザーがアップロードしたファイルを保存するには、OSS静的ストレージサーバーを使用することをお勧めします。
{r_sug_password_1} = 脆弱なパスワードの脆弱性の場合：
{r_sug_password_2} = 一般的な脆弱なパスワードをパスワードとして使用しないでください。
{r_sug_password_3} = システムパスワードとして、ランダムな値またはランダムに生成された文字列を使用することをお勧めします。
{r_sug_bac_1} = 水平ウルトラウイルスの脆弱性の場合：
{r_sug_bac_2} = テーブルを設計するときに、ユーザーID、注文ID、およびIDに従って動作するその他のIDフィールドをランダム化します。
{r_sug_bac_3} = 現在のユーザー操作が、現在ログインしているユーザーのIDおよび権限と一致するかどうかを厳密に確認します。
{r_sug_g_1} = 包括的なセキュリティ強化の提案：
{r_sug_g_2} = インターネットからの主流のWEBアプリケーションセキュリティ攻撃に対処するための専門的なWEBアプリケーションセキュリティ保護装置を装備。
{r_sug_g_3} = 専門的なセキュリティ評価を定期的に実施して、情報システムのセキュリティステータスを適時に把握します。
{r_sug_g_4} = 効果的な安全緊急プロセスを確立し、定期的に従業員の安全トレーニングを実施します。
{r_sug_g_5} = プロのセキュリティサービスチームを探すか、ThorSRC (Bountyteam China)クラウドテストなどのセキュリティクラウドテスト手法を採用します。
{r_sug_g_6} = 安全管理システムを改善し、情報システムの日常の保守と使用を規制します。
{r_get} = GET要請
{r_post} = POST要請
{r_l_h} = リスクが高い
{r_l_m} = 中リスク
{r_l_l} = リスクが低い
{r_vuln_maybe} = 疑われる
{js_split_n} = なし
{js_split_s} = 非同期
{js_split_b} = 爆破
{vuln_info} = 脆弱性の詳細
{vuln_type} = 脆弱性タイプ
{vuln_level} = 脆弱性レベル
{vuln_path} = 脆弱性アドレス
{related_frag} = 関連フラグメント
{r_type} = リクエストの種類
{api_detail} = APIの詳細
{api_name} = API名
{scaned_plat} = スキャンされたプラットフォーム
{para_value} = 入力パラメーター値
{scan_method} = このスキャンは
{scan_time} = スキャンモード、合計時間は
{s} = 秒
{use} = 使用
{ip_address} = スキャン出口として使用されるIPアドレス
{co_discovery} = 見つかった
{effective_api} = 个有効なURL
{effective_js} = 个関連するjsファイル
{effective_vuln} = 个セキュリティ侵害
{extra_cookies} = 追加のCookie情報
{extra_head} = 追加のヘッダー情報
{vuln_total_level} = 本ツールの分析を経て、目標プラットフォームの安全リスク等級は
{no_vuln} = 抜け穴なし
{unauth_vuln} = 不正アクセスの脆弱性
{info_vuln} = 機密情報漏えいの脆弱性
{info_vuln_type} = 機密情報の種類
{password_vuln} = 弱いパスワードの脆弱性
{vuln_passWord_num} = 弱いパスワードの脆弱性：
{r_vuln_passWord} = インターフェイスのパスワードの脆弱性が弱い（リスクが高い）
{request_info} = コンテンツのリクエスト：
{request_head} = リクエストヘッダー
{response_head} = 応答ヘッダー
{CORS_vuln} = CORSの脆弱性
{r_vuln_CORS} = サイトにCORSの脆弱性があります（低リスク）
{web_addr} = ウェブサイト
{r_vuln_bac} = BACのウルトラバイアの脆弱性があります（中リスク）
{vuln_BAC_num} = BACにオーバーライドする脆弱性の数
{respons_info} = 応答コンテンツ
{BAC_vuln} = BACの無許可の脆弱性
{r_vuln_upload} = 任意のファイルアップロードの脆弱性があります（高リスク）
{upload_vuln} = 任意のファイルアップロードの脆弱性
{vuln_upload_num} = 任意のファイルアップロードの脆弱性の数
{vuln_sql_num} = SQLインジェクションの脆弱性の数
{r_vuln_sql} = SQLインジェクションの脆弱性が存在します（高リスク）
{sql_vuln} = SQLインジェクションの脆弱性
{adv_start} = 詳細モードプロセスに入ります...
{beauty_js} = JSファイルが再美化されています...
{fuzzer_param} = APIパラメータをフェッチすると、フェッチ時間が長くなる可能性があります。
{ext_start} = 拡張機能が有効になっており、アタッチメントプラグインが実行されています。
{ext_end} = すべての追加プラグインが実行されました...
{unauth_test} = 不正アクセスの脆弱性の検出を開始します
{info_test} = 機密情報開示の脆弱性の検出を開始します
{cors_test} = CORSの脆弱性のテストを開始します
{password_test} = 弱いパスワードの脆弱性のテストを開始します
{upload_test} = 任意のファイルアップロードの脆弱性のテストを開始します
{bac_test} = BACの不正な脆弱性の検出を開始します
{sql_test} = SQLインジェクションの脆弱性のテストを開始します
{all_end} = すべてのスキャンとテストが完了しました。Packer Fuzzerチームは、ご利用いただきありがとうございます！
{check_pack_s} = おめでと，このサイトはフロントエンドパッキングで構成されだ可能性が高い！
{check_pack_f} = フロントエンドパッケージャーが検出されない，既存のルールが足りないかもしれません。
{xhlj} = ༒ Exhibiting tools at China's CYBER SECURITY ARSENAL
{db_path} = キャッシュファイルのパス：
{log_path} = ログファイルのパス：
{base_dir_list} = 次のBaseDirが正常に抽出されました：
{api_top5_list} = 最初の5つのAPI抽出結果は次のとおりです：
{new_base_dir} = 不正確な抽出結果が検出されました。新しいBaseDirを入力してください（コンマで区切ります）：
{api_length} = 長さ
